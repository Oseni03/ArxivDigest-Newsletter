{"main_page": "https://arxiv.org/abs/2404.00639", "pdf": "https://arxiv.org/pdf/2404.00639", "title": "RL-MUL: Multiplier Design Optimization with Deep Reinforcement Learning", "authors": "Dongsheng Zuo, Jiadong Zhu, Yikang Ouyang, Yuzhe Ma", "subjects": "Hardware Architecture (cs.AR); Machine Learning (cs.LG)", "abstract": "Multiplication is a fundamental operation in many applications, and multipliers are widely adopted in various circuits. However, optimizing multipliers is challenging and non-trivial due to the huge design space. In this paper, we propose RL-MUL, a multiplier design optimization framework based on reinforcement learning. Specifically, we utilize matrix and tensor representations for the compressor tree of a multiplier, based on which the convolutional neural networks can be seamlessly incorporated as the agent network. The agent can learn to optimize the multiplier structure based on a Pareto-driven reward which is customized to accommodate the trade-off between area and delay. Additionally, the capability of RL-MUL is extended to optimize the fused multiply-accumulator (MAC) designs. Experiments are conducted on different bit widths of multipliers. The results demonstrate that the multipliers produced by RL-MUL can dominate all baseline designs in terms of area and delay. The performance gain of RL-MUL is further validated by comparing the area and delay of processing element arrays using multipliers from RL-MUL and baseline approaches."}
{"main_page": "https://arxiv.org/abs/2404.00786", "pdf": "https://arxiv.org/pdf/2404.00786", "title": "There and Back Again: A Netlist's Tale with Much Egraphin'", "authors": "Gus Henry Smith, Zachary D. Sisco, Thanawat Techaumnuaiwit, Jingtao Xia, Vishal Canumalla, Andrew Cheung, Zachary Tatlock, Chandrakana Nandi, Jonathan Balkind", "subjects": "Hardware Architecture (cs.AR); Programming Languages (cs.PL)", "abstract": "EDA toolchains are notoriously unpredictable, incomplete, and error-prone; the generally-accepted remedy has been to re-imagine EDA tasks as compilation problems. However, any compiler framework we apply must be prepared to handle the wide range of EDA tasks, including not only compilation tasks like technology mapping and optimization (the \"there\"} in our title), but also decompilation tasks like loop rerolling (the \"back again\"). In this paper, we advocate for equality saturation -- a term rewriting framework -- as the framework of choice when building hardware toolchains. Through a series of case studies, we show how the needs of EDA tasks line up conspicuously well with the features equality saturation provides."}
