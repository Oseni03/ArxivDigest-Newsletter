{"main_page": "https://arxiv.org/abs/2404.00212", "pdf": "https://arxiv.org/pdf/2404.00212", "title": "Cost-sensitive computational adequacy of higher-order recursion in  synthetic domain theory", "authors": "Yue Niu, Jonathan Sterling, Robert Harper", "subjects": "Programming Languages (cs.PL)", "abstract": "We study a cost-aware programming language for higher-order recursion dubbed $\\textbf{PCF}_\\mathsf{cost}$ in the setting of synthetic domain theory (SDT). Our main contribution relates the denotational cost semantics of $\\textbf{PCF}_\\mathsf{cost}$ to its computational cost semantics, a new kind of dynamic semantics for program execution that serves as a mathematically natural alternative to operational semantics in SDT. In particular we prove an internal, cost-sensitive version of Plotkin's computational adequacy theorem, giving a precise correspondence between the denotational and computational semantics for complete programs at base type. The constructions and proofs of this paper take place in the internal dependent type theory of an SDT topos extended by a phase distinction in the sense of Sterling and Harper. By controlling the interpretation of cost structure via the phase distinction in the denotational semantics, we show that $\\textbf{PCF}_\\mathsf{cost}$ programs also evince a noninterference property of cost and behavior. We verify the axioms of the type theory by means of a model construction based on relative sheaf models of SDT."}
{"main_page": "https://arxiv.org/abs/2404.00338", "pdf": "https://arxiv.org/pdf/2404.00338", "title": "Polymorphic Records for Dynamic Languages", "authors": "Giuseppe Castagna, Lo\u00efc Peyrot", "subjects": "Programming Languages (cs.PL)", "abstract": "We define and study \"row polymorphism\" for a type system with set-theoretic types, specifically union, intersection, and negation types. We consider record types that embed row variables and define a subtyping relation by interpreting types into sets of record values and by defining subtyping as the containment of interpretations. We define a functional calculus equipped with operations for field extension, selection, and deletion, its operational semantics, and a type system that we prove to be sound. We provide algorithms for deciding the typing and subtyping relations. This research is motivated by the current trend of defining static type system for dynamic languages and, in our case, by an ongoing effort of endowing the Elixir programming language with a gradual type system."}
